<pre class="metadata">
Title: Web Platform Design Principles
Group: tag
Shortname: design-principles
Repository: w3ctag/design-principles
Status: ED
Level: none
ED: https://w3ctag.github.io/design-principles/
Editor: Sangwhan Moon, Invited Expert, https://sangwhan.com
Former Editor: Domenic Denicola, Google https://www.google.com/, https://domenic.me/, d@domenic.me
Former Editor: Travis Leithead, Microsoft, travil@microsoft.com
Abstract: This document contains a set of design principles to be used when designing Web Platform technologies. These principles have been collected during the Technical Architecture Group's discussions in <a href="https://github.com/w3ctag/design-reviews/">reviewing</a> developing specifications. We encourage specification designers to read this document and use it as a resource when making design decisions.
Default Biblio Status: current
Markup Shorthands: markdown on
Boilerplate: feedback-header off
!By: <a href="https://www.w3.org/2001/tag/">Members of the TAG</a>, past and present
!Participate: <a href="https://github.com/w3ctag/design-principles">GitHub w3ctag/design-principles</a> (<a href="https://github.com/w3ctag/design-principles/issues/new">file an issue</a>; <a href="https://github.com/w3ctag/design-principles/issues?state=open">open issues</a>)

Link Defaults: html (dfn) queue a task/in parallel/reflect
</pre>
<pre class="link-defaults">
spec:html; type:dfn; for:/;
    text:browsing context
    text:focus update steps
    text:task queue
spec:webidl; type:dfn; text:namespace
spec:selectors-4; type:selector; text::hover
</pre>
<pre class="anchors">
url: https://tc39.github.io/ecma262/#sec-error-objects; type: interface; text: Error;
url: https://www.w3.org/TR/WebCryptoAPI/#dfn-Crypto; type: interface; text: Crypto
url: https://www.w3.org/TR/payment-request/#dfn-state; type: dfn; spec: payment-request; text: [[state]];
url: https://w3c.github.io/touch-events/#idl-def-touchevent; type: interface; text: TouchEvent
url: https://w3c.github.io/IntersectionObserver/;
    type: interface; text: IntersectionObserver; url: #intersectionobserver
    type: interface; text: IntersectionObserverEntry; url: #intersectionobserverentry
    type: dictionary; text: IntersectionObserverInit; url: #dictdef-intersectionobserverinit
url: https://wicg.github.io/ResizeObserver/;
    type: interface; text: ResizeObserver; url: #resizeobserver
url: https://dom.spec.whatwg.org/#ref-for-concept-getelementsbytagname; type: interface; text: getElementsByTagName; for: Document
url: https://drafts.csswg.org/css-transitions-1/#transitions; type: dfn; text: CSS Transitions
</pre>
<!-- Route around bugs in other specs.
     https://github.com/whatwg/html/issues/5515
     https://github.com/w3c/remote-playback/issues/137
     https://github.com/whatwg/url/issues/522
     -->
<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
    text: file; for: input/type; type: attr-value; url: input.html#file-upload-state-%28type=file%29
urlPrefix: https://w3c.github.io/remote-playback/; spec: REMOTE-PLAYBACK
    text: RemotePlayback; type:interface; url: #remoteplayback-interface
    text: remote playback device; type:dfn; url: #dfn-remote-playback-devices
urlPrefix: https://url.spec.whatwg.org/; spec: URL;
    type: abstract-op; url: #percent-encode; text: percent-encode
</pre>

<style>
    table.data {
        text-align: left;
        font-size: small;
    }
</style>

<h2 id="basic-principles">Principles behind design of Web APIs</h2>

<h3 id="priority-of-constituencies">Put user needs first (Priority of Constituencies)</h3>

If a trade-off needs to be made,
always put user needs above all.

Similarly, when beginning to design an API,
be sure to understand and document the user need that the API aims to address.

[The internet is for end users](https://intarchboard.github.io/for-the-users/draft-iab-for-the-users.html):
any change made to the web platform has the potential to affect vast numbers of people,
and may have a profound impact on any person's life.

User needs come before the needs of web page authors,
which come before than the needs of user agent implementors,
which come before than the needs of specification writers,
which come before theoretical purity.

Like all principles,
this isn't absolute.
Ease of authoring affects how content reaches users.
User agents have to prioritize finite engineering resources,
which affects how features reach authors.
Specification writers also have finite resources,
and theoretical concerns reflect underlying needs of all of these groups.

See also:

* <a href="https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm">The web should not cause harm to society</a>
* <a href="https://intarchboard.github.io/for-the-users/draft-iab-for-the-users.html">The Internet is for End Users</a>

<h3 id="safe-to-browse">It should be safe to visit a web page</h3>

When adding new features,
design them to preserve the user expectation
that visiting a web page is generally safe.

The Web is named for its hyperlinked structure.
In order for the web to remain vibrant,
users need to be able to expect that merely visiting any given link
won't have implications for the security of their computer,
or for any essential aspects of their privacy.

For example, an API which allows any website to
[detect the use of assistive technologies](#do-not-expose-use-of-assistive-tech)
may make users of these technologies feel unsafe visiting unknown web pages,
since any web page may detect this private information.

If users have a realistic expectation of safety,
they can make informed decisions
between Web-based technologies and other technologies.
For example, users may choose to use a web-based food ordering page,
rather than installing an app,
since installing an app is riskier than visiting a web page.

To work towards making sure the reality of safety on the web matches users' expectations,
we can take complementary approaches when adding new features:
  * We can improve the user interfaces through which the Web is used
    to make it clearer what users of the Web should (and should not) expect;
  * We can change the technical foundations of the Web
    so that they match user expectations of privacy;
  * We can consider the cases where users would be better off
    if expectations were higher,
    and in those cases
    try to change both technical foundations and expectations.

A new feature which introduces safety risks may still improve user safety overall,
if it allows users to perform a task more safely on a web page
than it would be for them to install an app to do the same thing.
However, this benefit needs to be weighed against the common goal
of users having a reasonable expectation of safety on web pages.

See also:

* [Security and Privacy Self-Review](https://www.w3.org/TR/security-privacy-questionnaire/)

<h3 id="trusted-ui">Trusted user interface should be trustworthy</h3>

Consider whether new features impact trusted user interfaces.

Users depend on trusted user interfaces
such as the address bar, security indicators and permission prompts,
to understand who they are interacting with and how.
These trusted user interfaces must be able to be designed in a way
that enables users to trust
that the information they provide is genuine,
and hasn't been spoofed or hijacked by the website.

If a new feature allows untrusted user interfaces
to resemble trusted user interfaces,
this makes it more difficult for users to understand what information is trustworthy.

<p class="example">
For example, JavaScript `alert()` allows a page to show a modal dialog which looks like part of the browser.
This is often used to attempt to trick users into visiting scam websites.
If this feature was proposed today, it would probably not proceed.
</p>

<h3 id="consent">Ask users for meaningful consent when appropriate</h3>

If a useful feature has the potential to cause harm to users,
make sure that the user can give *meaningful consent* for that feature to be used,
and that they can refuse consent effectively.

In order to give *meaningful consent*, the user must:
- **understand** what permission they may choose whether to grant the web page
- be able to choose to give or refuse that permission **effectively**.

If a feature is powerful enough to require a user consent,
but it's impossible to explain to a typical user what they are consenting to,
that's a signal that you may need to reconsider the design of the feature.

If a permission prompt is shown,
and the user doesn't grant permission,
the Web page should not be able to do anything
that the user believes they have refused consent for.

By asking for consent,
we can inform the user of what capabilities the web page does or doesn't have,
reinforcing their confidence that <a href="#safe-to-browse">the web is safe</a>.
However, the <a href="priority-of-constituencies">user benefit</a>
of a new feature must justify the additional burden on users
to decide whether to grant permission for each feature
whenever it's requested by a Web page.

<p class="example">
For example,
the [Geolocation API](https://www.w3.org/TR/geolocation-API/)
grants access to a user's location.
This can help users in some contexts,
like a mapping application,
but may be dangerous to some users in other contexts -
especially if used without the user's knowledge.
So that the user may decide whether their location may be used by a Web page,
a permission prompt should be shown to the user asking whether to grant location access.
If the user refuses permission,
no location information is available to the Web page.
</p>

<h3 id="devices-platforms">Support the full range of devices and platforms (Media Independence)</h3>
<!-- was "Media Independence" in the HTML Design Principles -->

As much as possible,
ensure that features on the web work across different input and output devices,
different screen sizes, different interaction modes,
different platforms, and different media.

One of the main values of the Web is that it's extremely flexible:
a Web page may be viewed on virtually any consumer computing device
at a very wide range of screen sizes,
may be used to generate printed media,
and may be interacted with in a large number of different ways.
New features should match the existing flexibility of the Web platform.

<div class="note">
This doesn't imply that features which don't work in *every• possible context should be excluded.
For example, hyperlinks can't be visited when printed on paper,
and the ''click'' event doesn't translate perfectly to touch input devices
where positioning and clicking the pointer occur in the same gesture (a "tap").

These features still work across a wide variety of contexts,
and can be adapted to devices that don't support their original intent -
for example, a tap on a mobile device will fire a ''click'' event as a fallback.
</div>

Features should also be designed so that the easiest way to use them
maintains flexibility.

<div class="example">
The <a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting">`display: block`</a>,
<a href="https://drafts.csswg.org/css-flexbox-1/#box-model">`display: flex`</a>
and <a href="https://www.w3.org/TR/css-grid-1/#grid-containers">`display: grid`</a> layout models in CSS
all default to placing content within the available space and without overlap,
so that it works across screen sizes,
and allows users to choose their own font and font size without causing text to overflow.
</div>

<h2 id="api-across-languages">API Design Across Languages</h2>

<h3 id="simplicity">Prefer simple solutions</h3>
<!-- was "Avoid Needless Complexity" in the HTML Design Principles -->

Look hard for simple solutions to the
<a href="#priority-of-constituencies">user needs</a>
you intend to address.

Simple solutions are generally better than complex solutions,
although they may be harder to find.
Simpler features are easier for user agents to implement and test,
more likely to be interoperable,
and easier for authors to understand.

Make sure that your <a href="#priority-of-constituencies">user needs</a>
are well-defined, so that you can avoid scope creep.

See also:

* [[LEAST-POWER]]

<h3 id="name-thoughtfully">Name things thoughtfully</h3>

Name APIs with care.
Naming APIs well makes it much easier for authors to use them correctly.

See the more detailed <a href="#naming-is-hard">Naming principles</a> section
for specific guidance on naming.

<h3 id="feature-detect">New features should be detectable</h3>

If appropriate, provide a way for authors to programmatically detect
whether your feature is available,
so that web content may gracefully handle the feature not being present.

An existing feature may not be available on a page for a number of reasons, including
- because it has not been implemented yet, or
- because it's only available in <a href="#secure-context">secure contexts</a>, or
- because the user denied the page permission to use the feature.

Authors should need to write different code to handle each scenario,
and should not be able to deduce which cases applied.

<p class="note">
When a feature is available but isn't feasible to use
because a required device isn't present,
it may be better to expose that the feature is available
and have a separate way to detect that the device isn't.
See [[#device-enumeration]].
</p>

Authors should always be able to detect a feature from JavaScript,
and in some cases the feature should also be detectable
in the language where it's used
(such as ''@supports'' in CSS).

In some cases, it may **not** be appropriate to allow feature detection.
Whether the feature should be detectable or not
should be based on the <a href="#priority-of-constituencies">user need</a>
for the feature:
if there is a user need or design principle which would fail
if feature detection were available for the feature,
then you should not support feature detection.

See also:

* [[#do-not-expose-use-of-private-browsing-mode]]
* [[#do-not-expose-use-of-assistive-tech]]
* [[#secure-context]]

<h3 id="secure-context">Consider limiting new features to secure contexts</h3>

Always limit your feature to secure contexts
if it would pose a risk to the user
without the authentication, integrity, or confidentiality
that's present only in secure contexts.

<div class="example">
One example of a feature that should be limited to secure contexts
is [Geolocation](https://www.w3.org/TR/geolocation-API/),
since it would be a risk to users' privacy to transmit their location in an insecure way.
</div>

For other features, carefully weigh up whether
<a href="priority-of-constituencies">user needs</a> are best served
by making the feature available in an insecure context.

<div class="note">
Specification authors can limit most features defined in
<a href="https://heycam.github.io/webidl/">Web IDL</a>,
to secure contexts
by using the
<code>[<a href="https://w3c.github.io/webappsec-secure-contexts/#integration-idl">SecureContext</a>]</code> extended attribute
on interfaces, namespaces, or their members (such as methods and attributes).
However, for some types of API (e.g., dispatching an event),
limitation to secure contexts should just
be defined in normative prose in the specification.
</div>

<div class="note">
As described in [[#feature-detect]],
you should provide a way to programmatically detect whether a feature is available,
including cases where the feature is unavailable because the context isn't secure.

However, if, for some reason
there is no way for code to gracefully handle the feature not being present,
limiting the feature to secure contexts might cause problems
for code (such as libraries) that may be used in either secure or non-secure contexts.
</div>

<h3 id="do-not-expose-use-of-private-browsing-mode">Don't reveal that private browsing mode is engaged</h3>

Make sure that your feature doesn't give authors a way to detect private browsing mode.

Some people use [private browsing mode](https://www.w3.org/2001/tag/doc/private-browsing-modes/)
for their own <a href="#safe-to-browse">safety</a>.
Because of this, the fact that someone is using private browsing mode
may be [sensitive information](https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data) about them.
This information may [harm](https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm) people
if it is revealed to a web site contolled by others who have power over them
(such as employers, parents, partners,
or [state actors](https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression)).

Given such dangers,
websites should not be able to detect that private browsing mode is engaged.

<div class="example">
User Agents which support [IndexedDB](https://www.w3.org/TR/IndexedDB/)
should not disable it in private browsing mode,
because that would reveal that private browsing mode is engaged
</div>

<div class="example">
The [Payment Request API](https://www.w3.org/TR/payment-request/)'s
[show() method](https://www.w3.org/TR/payment-request/#show-method),
when called,
allows User Agents <q cite="https://www.w3.org/TR/payment-request/#show-method">to act
as if the user had immediately
[aborted the payment request](https://www.w3.org/TR/payment-request/#dfn-user-aborts-the-payment-request)</q>.

This enables User Agents to automatically abort payment requests
in private browsing mode
(thus protecting [sensitive information](https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data)
such as the user's shipping or billing address)
without revealing that private browsing mode is engaged.
</div>

See also:

* [Security and privacy are essential](https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy)
* [What data does this specification expose to an origin?](https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data)
* [[#private-browsing-mode]]

<h3 id="private-browsing-mode">Consider how your API should behave in private browsing mode</h3>

If necessary, specify how your API should behave differently
in private browsing mode.

For example, if your API would reveal information
that would allow someone to correlation
a single user’s activity
both in and out of private browsing mode,
consider possible [mitigations](https://www.w3.org/TR/security-privacy-questionnaire/#mitigations)
such as introducing noise,
or using permission prompts to give the user extra information
to help them meaningfully consent to this tracking (see [[#consent]]).

Private browsing modes enable users to browse the web
without leaving any trace of their private browsing on their device.
Therefore, APIs which provide client-side storage
should not persist data stored
while private browsing mode is engaged
after it's disengaged.
This can and should be done
without revealing any detectable API differences to the site.

<div class="example">
User Agents which support
[localStorage](https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage)
should not persist storage area changes
made while private browsing mode is engaged.

If the User Agent has two simultaneous sessions with a site,
one in private browsing mode and one not,
storage area changes made in the private browsing mode session
should not be revealed to the other browsing session,
and vice versa.
(The [storage event](https://html.spec.whatwg.org/multipage/indices.html#event-storage) should not be fired
at the other session's [window object](https://html.spec.whatwg.org/multipage/window-object.html#window).)
</div>

See also:

* [Does this specification introduce new state for an origin that persists across browsing sessions?](https://www.w3.org/TR/security-privacy-questionnaire/#persistent-origin-specific-state)
* [Security and privacy self review: Private Browsing](https://www.w3.org/TR/security-privacy-questionnaire/#private-browsing)

<h3 id="do-not-expose-use-of-assistive-tech">Don't reveal that assistive technologies are being used</h3>

Make sure that your API doesn't provide a way
for authors to detect that a user is using assistive technology
without the user's consent.

[The web platform must be accessible to people with disabilities.](https://www.w3.org/2001/tag/doc/ethical-web-principles/#allpeople)
If a site can detect that a user is using an assistive technology,
that site can deny or restrict the user's access to the services it provides.

People who make use of assistive technologies
are often [vulnerable members of society](https://www.w3.org/2001/tag/doc/ethical-web-principles/#noharm);
their use of assistive technologies is [sensitive information](https://www.w3.org/TR/security-privacy-questionnaire/#sensitive-data) about them.
If an API provides access to this information
without the user's [consent](#consent),
this sensitive information may be revealed to others
(including [state actors](https://www.w3.org/2001/tag/doc/ethical-web-principles/#expression))
who may wish them harm.

Sometimes people propose features which aim to improve the user experience
for users of assistive technology,
but which would reveal the user's use of assistive technology as a side effect.
While these are well intentioned,
they violate [[#safe-to-browse]],
so alternative solutions must be found.

<div class="example">

The [Accessibility Object Model](https://wicg.github.io/aom/) (AOM)
used to define a set of events which, when fired,
[revealed the use of assistive technology](https://github.com/WICG/aom/issues/81).

AOM has since removed these events and
[replaced them](https://github.com/WICG/aom/blob/gh-pages/explainer.md#user-action-events-from-assistive-technology) with synthetic DOM events
which don't reveal the use of assistive technology.

</div>

See also:

* [Web Technology Accessibility Guidelines](https://w3c.github.io/apa/fast/)
* [Security and privacy are essential](https://www.w3.org/2001/tag/doc/ethical-web-principles/#privacy)
* [What data does this specification expose to an origin?](https://www.w3.org/TR/security-privacy-questionnaire/#underlying-platform-data)

<h2 id="css">Cascading Style Sheets (CSS)</h2>

This section details design principles for features which are exposed via CSS.

See also [[#css-naming]].

<h3 id="css-property-separation">Separate CSS properties based on what should cascade separately</h3>

Decide which values should be grouped together as CSS properties
and which should be separate properties
based on what makes sense to set independently.

[CSS cascading](https://www.w3.org/TR/2011/REC-CSS2-20110607/cascade.html#cascade)
allows [declarations](https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#declaration)
from different rules or different style sheets
to override one another.
If there is a logical set of attributes which should all be overridden together,
they should be grouped together in a single property so that they cascade together.
Likewise, if there are attributes which should be able to be overridden independently,
they should be separate properties.

<div class="example">For example, the "size" and "sink" aspects of the 'initial-letter' property
belong in a single property
because they are part of a single initial letter effect
(e.g., a drop cap, sunken cap, or raised cap).

However, the 'initial-letter-align' property should be separate because it
sets an alignment policy for all of these effects across the document
which is a general stylistic choice
and a function of the script (e.g., Latin, Cyrillic, Arabic) used in the document.
</div>

<h3 id="css-inherited-or-not">Make appropriate choices for whether CSS properties are inherited</h3>

Decide whether a property should be [inherited](https://www.w3.org/TR/2011/REC-CSS2-20110607/cascade.html#inheritance)
based on whether the effect of the property should be overridden or added to
if set on an ancestor as well as a descendant.

If setting the property on a descendant element needs to override (rather than add to)
the effect of setting it on an ancestor,
then the property should probably be inherited.
A specification of an non-inherited property requiring that the handling of an element
look at the value of that property on its ancestors (which may also be slow)
is a "code smell" that suggests that the property likely should have been inherited.

If setting the property on a descendant element is a separate effect
that adds to setting it on an ancestor,
then the property should probably **not** be inherited.
A specification of an inherited property requiring that the handling of an element
ignore the value of a property if it's the same as the value on the parent element
is a "code smell" that suggests that the property likely should not have been inherited.

<div class="note">
If a property has an effect on text,
then it's almost always true that
a descendant element needs to override (rather than add to)
the effect of setting it on an ancestor,
and the property should be inherited.
This is also needed to maintain the design principle that
inserting an unstyled inline element around a piece of text
doesn't change the appearance of that text.
</div>

<div class="example">
For example, the 'background-image' property is **not** inherited.

If the 'background-image' property had been inherited,
then the specification would have had to create a good bit of complexity
to avoid a partially-transparent image
being visibly repeated for each descendant element.
This complexity probably would have involved
behaving differently if the property had the same value on the parent element,
which is the "code smell" mentioned above that suggests
that a property likely should not have been inherited.
</div>

<div class="example">
Another example is the 'font-size' property, which **is** inherited.
It sets the size of the font used for the text in the element,
and continues to apply to any descendants that don't
have a declaration setting 'font-size' to a different value.

If the 'font-size' property were not inherited,
then it would probably have to have an initial value
that requires walking up the ancestor chain to find the nearest ancestor
that doesn't have that value.
This is the "code smell" mentioned above that suggests
that a property likely should have been inherited.
</div>

<h3 id="css-computed-value">Choose the computed value type based on how the property should inherit</h3>

Choose the <a>computed value</a> of a CSS property
based on how it will [=inherit=],
and the other properties which may depend on it,
whether or not it has been inherited.

<div class="note">
Note: the <a>computed value</a> should not be confused with the [=resolved value=]
which is returned from the {{getComputedStyle()}} method.
</div>

Certain CSS properties are calculated with
<a href="https://wiki.csswg.org/spec/property-dependencies">dependencies</a>
on others:
for example, the <a>computed value</a>
of a property specified in 'lh' units
depends on the 'line-height' property which applies to the element being considered.
The <a>computed value</a> for a property should be chosen
so that the dependent values make sense,
regardless of whether they are inherited.

<div class="example">
For example, the 'line-height' property may accept a <<number>> value,
such as ''line-height: 1.4''.
This value represents a multiple of the 'font-size',
so if the 'font-size' is ''20px'',
the [=actual value=] for the line height is ''28px''.

However, the <a>computed value</a> in this case is the <<number>> ''1.4'',
not the <<length>> ''28px''.

The 'line-height' property can be inherited
into elements that have a different 'font-size',
and any property on those elements which depends on 'line-height'
must take the relevant 'font-size' into account,
rather than the 'font-size' for the element from which
the 'line-height' value was inherited.

  <pre highlight=html>
&lt;body style="font-size: 20px; line-height: 1.4"&gt;

  &lt;p&gt;This body text has a line height of 28px.&lt;/p&gt;

  &lt;h2 style="font-size: 200%"&gt;
    This heading has a line-height of 56px,
    not 28px, even though the line-height was declared on the body.
    This means that the 40px font won't overflow the line height.
  &lt;/h2&gt;
&lt;/body&gt;
  </pre>

These number values are generally the preferred values to use for 'line-height'
because they inherit better than length values.
</div>

Issue: The paragraph below is hard to understand.

Making decisions about whether dependencies should affect computed values
often involves tradeoffs of complexity.
Sometimes it is less complex
for the behavior to happen as part of the computation of the computed value;
sometimes it is less complex
for the behavior to happen in whatever handles the computed value.
(This complexity might be in the specification, in implementations, or both.
Complexity in implementations might affect how fast things run for end users.)

See also:

* [Computed Values Patterns](https://wiki.csswg.org/spec/computed-values)

<h2 id="js">JavaScript Language</h2>

<h3 id="js-only">Web APIs are for JavaScript</h3>

When designing imperative APIs for the Web,
use JavaScript.
In particular,
you can freely rely upon language-specific semantics and conventions,
with no need to keep things generalized.

<div class="example">
For example,
the {{CustomElementRegistry.define()}} method takes a reference to
a <a href="https://tc39.es/ecma262/#sec-static-semantics-constructormethod">Constructor Method</a>.

This takes advantage of the relatively recent addition of Classes to JavaScript,
and fact that function pointers are very easy to use in JavaScript.
</div>

<div class="note">
JavaScript is also known as [[!ECMASCRIPT]]
</div>

<div class="note">
[[WEBIDL]] defines a separate "ECMAScript binding" section;
this is a historical artifact only.
</div>

<h3 id="js-rtc">Preserve run-to-completion semantics</h3>

Don't modify data accessed from JavaScript APIs
while a JavaScript <a>event loop</a> is running.

A JavaScript Web API is generally a wrapper around
a feature implemented in a lower-level language,
such as C++ or Rust.
Unlike those languages,
JavaScript guarantees that once a piece of code begins executing,
it will continue executing until it has completed.

Because of that, JavaScript authors take for granted
that the data available to a function won’t change
(unless that function changes that data itself).

So if a JavaScript Web API exposes some piece of data,
such as an object property,
the user agent must not update that data
while a JavaScript task is running.
Instead, if the underlying data changes,
<a>queue a task</a> to modify the exposed version of the data.

<div class="example">
If a JavaScript task is has accessed the {{navigator.onLine}} property,
and browser's online status changes,
the property won't be updated until the next task.
</div>

<h3 id="js-gc">Don't expose garbage collection</h3>

Ensure your JavaScript Web APIs don't behave differently
depending on the timing of garbage collection.

The timing of garbage collection is different in different user agents,
and may change over time as user agents work on improving performance.
If an API exposes the timing of garbage collection,
it can cause programs to behave differently
in different contexts.
This means that authors need to write extra code to handle these differences.
It may also make it more difficult for user agents
to implement different garbage collection strategies,
if there is enough code which depends on timing working a particular way.

This means that you shouldn't expose any API that acts as a weak reference,
e.g. with a property that becomes <code highlight="js">null</code>
once garbage collection runs.
Object and data lifetimes in JavaScript code should be predictable.

<div class="example">
{{Document/getElementsByTagName}} returns an {{HTMLCollection}} object,
which may be re-used if the method is called twice on the same Document object,
with the same tag name.
In practice,
this means that the same object will be returned
if and only if it has not been garbage collected.
This means that the behaviour is different depending on
the timing of garbage collection.

If {{Document/getElementsByTagName}} were designed today,
the advice to the designers would be
to either reliably reuse the output,
or to produce a new {{HTMLCollection}} each time it's invoked.
</div>

{{Document/getElementsByTagName}} gives no sign that
it may depend on the timing of garbage collection.
In contrast, APIs which are explicitly designed
to depend on garbage collection,
like `WeakRef` or `FinalizationGroup`,
set accurate author expectations about
the interaction with garbage collection.

<h2 id="api-surface">JavaScript API Surface Concerns</h2>

<h3 id="attributes-like-data">Attributes should behave like data properties</h3>

[[!WEBIDL]] attributes should act like simple JavaScript object properties.

In reality, IDL attributes are implemented as accessor properties
with separate getter and setter functions.
To make them act like JavaScript object properties:

* Getters must not have any observable side effects.
* Getters should not perform any complex operations.
* Ensure that <code highlight="js">obj.attribute === obj.attribute</code> is always true.
    Don't create a new value each time the getter is called.
* If possible, ensure that given <code highlight="js">obj.attribute = x</code>,
    <code highlight="js">obj.attribute === x</code> is true.
    (This may not be possible if some kind of conversion is necessary for `x`.)

If you were thinking about using an attribute,
but it doesn't behave this way,
you should probably use a method instead.

<div class="example">
For example, <code highlight="js">offsetTop</code> performs layout,
which can be complex and time-consuming.
It would have been better if this had been a method like {{Element.getBoundingClientRect()}}.
</div>

<h3 id="live-vs-static">Consider whether objects should be live or static</h3>

If an API gives access to an object
representing some internal state,
decide whether that object should continue to be updated as the state changes.

An object which represents the current state at all times
is a <dfn export>live object</dfn>,
while an object which represents the state at the time it was created
is a <dfn export>static object</dfn>.

<h4 id="live-objects" class="no-num no-toc">Live objects</h4>

If an object allows the author to change the internal state,
that object should be live.
For example, DOM {{Node}}s are live objects,
to allow the author to make changes to the document
with an understanding of the current state.

Properties of live objects may be computed as they are accessed,
instead of when the object is created.
This makes live objects sometimes a better choice
if the data needed is complex to compute,
since there is no need to compute all the data before the object is returned.

A live object may also use less memory,
since there is no need to copy data to a static version.

<h4 id="static-objects" class="no-num no-toc">Static objects</h4>

If an object represents a list that might change,
most often the object should be static.
This is so that code iterating over the list
doesn't need to handle the possibility of the list changing in the middle.

<div class="example">
{{Document/getElementsByTagName()}} returns a live object which represents a list,
meaning that authors need to take care when iterating over its items.

<!-- does anyone know more specifics here? -->
The choice to have {{ParentNode/querySelectorAll()}} return static objects
was made after spec authors noticed that {{getElementsByTagName()}}
was causing problems.

{{URLSearchParams}} isn't static,
even though it represents a list,
because it's the way for authors to change the query string of a URL.
</div>

Note:  For <a>maplike</a> and <a>setlike</a> types,
this advice may not apply,
since these types were designed to behave well
when they change while being iterated.

If it would be complex to keep the data needed by an object up to date,
a static object avoids having to keep the object updated
until it's garbage collected,
even if it isn't being used.
<!-- why wouldn't it be computed lazily though? -->

If a static object represents some state which may change frequently,
it should be returned from a method,
rather than available as an attribute.

See also:

* [[#attributes-like-data]]

<h3 id="optional-parameters">Make non-critical function parameters optional</h3>

Parameters that are not strictly necessary should be made optional.
Making arguments optional with reasonable defaults
reduces overhead when the function is used,
and increases user-friendliness.

Optional parameters should be consolidated into a dictionary,
and empty parameters should be treated identically to when the parameter is omitted.

<p class="example">For example,
<code highlight="js">element.scrollIntoView(false, {});</code>
is equivalent to
<code highlight="js">element.scrollIntoView(false);</code>,
and
<code highlight="js">element.addEventListener("click", onClick, undefined);</code>
is equivalent to
<code highlight="js">element.addEventListener("click", onClick)</code>.
</p>

Exceptions have been made for legacy interoperability reasons
(such as XMLHttpRequest),
but this should be considered a design mistake rather than recommended practice.


<h3 id="prefer-dict-to-bool">Prefer dictionary parameters over boolean parameters or other unreadable parameters</h3>

APIs should generally prefer dictionary parameters
(with named booleans in the dictionary)
over boolean parameters.
This makes the code that calls the API
<a href="https://ariya.io/2011/08/hall-of-api-shame-boolean-trap">much more readable</a>.
It also makes the API more extensible in the future,
particularly if multiple booleans are needed.

<p class="example">For example,
<code highlight="js">new Event("exampleevent", { bubbles: true, cancelable: false})</code>
is much more readable than
<code highlight="js">new Event("exampleevent", true, false)</code>.

Furthermore,
the booleans in dictionaries need to be designed so that they all default to false.
If booleans default to true, then
<a href="https://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0302.html">users of the API will find unexpected JavaScript behavior</a> since <code highlight="js">{ passive: false }</code> and <code highlight="js">{ passive: undefined }</code> will produce different results.
But at the same time, it's important to avoid naming booleans in negative ways,
because then code will have confusing double-negatives.
These pieces of advice may sometimes conflict,
but the conflict can be avoided by using opposite words without negatives,
such as &ldquo;repeat&rdquo; versus &ldquo;once&rdquo;,
&ldquo;isolate&rdquo; versus &ldquo;connect&rdquo;,
or &ldquo;private&rdquo; versus &ldquo;public&rdquo;.

Likewise, APIs should use dictionary parameters to avoid other cases
of difficult to understand sequences of parameters.
For example,
<code highlight="js">window.scrollBy({ left: 50, top: 0 })</code>
is more readable than
<code highlight="js">window.scrollBy(50, 0)</code>.

<h3 id="constructors">Classes should have constructors when possible</h3>

By default, [[!WEBIDL]] interfaces are reified in JavaScript as "non-constructible" classes: trying
to create instances of them using the normal pattern in JavaScript, `new X()`, will throw a
{{TypeError}}. This is a poor experience for JavaScript developers, and doesn't match the design of
most of the JavaScript standard library or of the classes JavaScript developers themselves create.

From a naive perspective, it's not even coherent: how can instances of this thing ever exist, if
they can't be constructed? The answer is that the platform has magic powers: it can create instances
of Web IDL-derived classes without ever actually calling their constructor.

You should strive to reduce such magic in designing your own APIs, and give them constructors which
allow JavaScript developers to create them, just like the platform does. This means adding an
appropriate [=constructor operation=] to your interface, and defining the algorithm for
creating new instances of your class.

Apart from reducing the magic in the platform, adding constructors allows JavaScript developers to
create instances of the class for their own purposes, such as testing, mocking, or interfacing with
third-party libraries which accept instances of that class. Additionally, because of how
JavaScript's class design works, it is only possible to create a subclass of the class if it is
constructible.

Sometimes this isn't the right answer: for example, some objects essentially wrap handles to
privileged resources, and it isn't reasonable to create some representation of that privileged
resource in JavaScript so that you can pass it to the constructor. Or the object's lifecycle needs
to be very carefully controlled, so that creating new ones is only possible through privileged
operations. Or the interface represents an abstract base class for which it doesn't make sense to
construct an instance, or create an author-defined subclass. But cases like these should be the
exception, not the norm.

<p class="example">The {{Event}} class, and all its derived interfaces, are constructible. This
allows JavaScript developers to synthesize instances of them, which can be useful in testing or
shimming scenarios. For example, a library designed for {{MouseEvent}} instances can still be used
by another library that accepts as input {{TouchEvent}} instances, by writing a small bit of adapter
code that creates synthetic {{MouseEvent}}s.</p>

<p class="example">The {{DOMTokenList}} class is, very unfortunately, <a
href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=27114">not constructible</a>. This prevents the
creation of <a>custom elements</a> that expose their token list attributes as {{DOMTokenList}}s.</p>

<p class="example">No HTML elements are constructible. This is largely due to some unfortunate
design decisions that <a href="https://github.com/whatwg/html/issues/896">would take some effort to
work around</a>. In the meantime, for the purposes of the <a>customized built-in elements</a>
feature, they have been made subclassable through a specifically-designed one-off solution: the
[{{HTMLConstructor}}] extended attribute.</p>

<p class="example">The {{Window}} class is not constructible, because creating a new window is a
privileged operation with significant side effects. Instead, the {{Window/open|window.open()}}
method is used to create new windows.</p>

<p class="example">The {{ImageBitmap}} class is not constructible, as it represents an immutable,
ready-to-paint bitmap image, and the process of getting it ready to paint must be done
asynchronously. Instead, the {{createImageBitmap()}} method is used to create it.</p>

<p class="example">Several non-constructible classes, like {{Navigator}}, {{History}}, or
{{Crypto}}, are non-constructible because they are singletons representing access to per-window
information. In these cases, the Web IDL <a>namespace</a> feature or some evolution of it might have
been a better fit, but they were designed before namespaces existed, and somewhat exceed the current
capabilities of namespaces. If you're designing a new singleton, strongly consider using a
<a>namespace</a> instead of a non-constructible class; if namespaces don't yet have enough
capabilities, <a href="https://github.com/heycam/webidl/issues/new">file an issue on Web IDL</a> to
discuss.</p>

<div class="note">
    <p>For any JavaScript developers still incredulous that it is possible to create an instance of
    a non-constructible class, we provide the following code example:</p>

    <pre highlight="js">
        const secret = {};

        class NonConstructible {
            constructor(theSecret = undefined) {
                if (theSecret !== secret) {
                    throw new TypeError("Illegal constructor.");
                }

                // Set up the object.
            }
        }
    </pre>

    <p>If the author of this code never exposes the `secret` variable to the outside world, they can
    reserve the ability to create instances of `NonConstructible` for themself: they can always do
    <code highlight="js">const instance = new NonConstructible(secret)</code>. But the outside world
    can never successfully "guess" the secret, and thus will always receive a {{TypeError}} when
    trying to construct an instance of `NonConstructible`.</p>

    <p>From this perspective, what browsers are doing when they create non-constructible classes
    isn't magic: it's just very tricky. The above section is aimed at urging browsers to avoid such
    tricks (or their equivalents in C++/Rust/etc.) whenever reasonable.</p>
</div>


<h3 id="promises">Design asynchronous APIs using Promises</h3>

Asynchronous APIs should generally be designed using promises
rather than callback functions.
This is the pattern that we've settled on for the Web platform,
and having APIs consistently use promises means that the APIs are
easier to use together (such as by chaining promises).
This pattern also tends to produce cleaner code than the use
of APIs with callback functions.

Furthermore, you should carefully consider whether an API might need
to be asynchronous before making it a synchronous API.
An API might need to be asynchronous if:
  * some implementations may (in at least some cases) wish to prompt the user
    or ask the user for permission before allowing use of the API,
  * implementations may need to consider information that might be stored
    on disk in order to compute the result,
  * implementations may need to interact with the network before returning
    the result, or
  * implementations may wish to do work on another thread or in another
    process before returning the result.

For more information on how to design APIs using promises,
and on when to use promises and when not to use promises,
see <strong><a href="https://www.w3.org/2001/tag/doc/promises-guide">Writing
Promise-Using Specifications</a></strong>.

<h3 id="aborting">Cancel asynchronous APIs/operations using AbortSignal</h3>

Async functions that need cancellation should take an `AbortSignal` as part
of an options dictionary.

Example:

```js
const controller = new AbortController();
const signal = controller.signal;
geolocation.read({ signal });
```

Reusing the same primitive everywhere has multiplicative effects throughout
the platform. In particular, there's a common pattern of using a single
`AbortSignal` for a bunch of ongoing operations, and then aborting them
(with the corresponding `AbortController`) when e.g. the user presses cancel,
or a single-page-app navigation occurs, or similar. So the minor extra
complexity for an individual API leads to a large reduction in complexity
when used with multiple APIs together.

There might be cases where cancellation cannot be guaranteed. In these cases,
the `AbortController` can still be used because a call to `abort()` on
`AbortController` is a request to abort. How you react to it depends on your spec.
Note, requestAbort() was considered in the AbortController design instead
of abort(), but the latter was chosen for brevity.

<h3 id="string-constants">Constants, enums, and bitmasks</h3>

In many other platforms and programming languages, constants and enums are
commonly expressed using a integer constant, sometimes in conjunction with
a bitmask mechanism.

However on the Web platform, it is more common to use a string constant for
the cases where a constant is needed. This is much more inspection friendly
for both development and expressing the constant codes through a user facing
interface, and in JavaScript engines, using integers offers no significant
performance benefit over strings.

Strings do not directly address the use case for bitmasks. For these cases,
you should use an object dictionary which contains the state that the
bitmask is attempting to express, as object dictionaries can then be passed
around from method to method as needed as easily as the state in a single
bitmask value.

<h2 id="event-design">Event Design</h2>

<h3 id="one-time-events">Use promises for one time events</h3>

Follow the <a href="https://www.w3.org/2001/tag/doc/promises-guide#one-time-events">advice</a>
in the <strong><a href="https://www.w3.org/2001/tag/doc/promises-guide">Writing
Promise-Using Specifications</a></strong> guideline.

<h3 id="promises-and-events">Events should fire before Promises resolve</h3>

In the case that an asynchronous algorithm (Promise based) intends to dispatch
events, then such events should be dispatched before the Promise resolves, rather
than after.

This ensures consistency, for instance if you have event handlers changing
state, you want all that state to be applied before acting on the resolved
promise, as you can subscribe to a promise at any time (before/after it has
resolved or rejected).

<h3 id="dont-invent-event-like">Don't invent your own event listener-like infrastructure</h3>

For recurring events, it could be convenient to create a custom pair of APIs to
`"register"`/`"unregister"`, `"subscribe"`/`"unsubscribe"`, etc., that take a
callback and get invoked multiple times until paired cancel API is called.

Instead, use the existing event registration pattern and separate API controls
to start/stop the underlying process (since event listeners should not have
[[#events-are-for-notification|side-effects]]).

If the callback would have been provided specific data, then this data should
be added to an `Event` object (but see <a href="#state-and-subclassing">State
and `Event` subclasses</a> as this is not always necessary).

In some cases, you can transfer the state that would be surfaced in callback
parameters into a more persistent object which, in turn, can inherit from
`EventTarget`.

In some cases you might not have an object to inherit from `EventTarget` but
it is usually possible to create such an object.

For instance with Web Bluetooth you can add event listeners on a `Characteristic`
object, which is obtained via `getCharacteristic()`. If you need to filter events,
it might be possible to create a filter like

```js
const filter = navigator.nfc.createReadFilter({
  recordType: "json"
});

const onMessage = message => { … };
filter.addEventListener('exchange', onMessage);
```

<h3 id="always-add-event-handlers">Always add event handler attributes</h3>

For an object that inherits from {{EventTarget}}, there are two techniques available for registering
an event handler (e.g., an event named "somethingchanged"):

1. {{EventTarget/addEventListener()}} which allows authors to register for the event using the
    event's name (i.e.,
    <code highlight="js">someobject.addEventListener("somethingchanged", myhandler)</code>) and
2. `onsomethingchanged` IDL attributes which allow one event handler to be directly assigned to the
    object (i.e., <code highlight="js">someobject.onsomethingchanged</code>).

Because there are two techniques for registering events on objects inheriting from {{EventTarget}},
authors may be tempted to omit the corresponding [=event handler IDL attributes=]. They may assume
that event handler IDL attributes are a legacy registration technique or are simply not needed
given that {{EventTarget/addEventListener()}} is available as an alternative. However, it is
important to continue to define event handler IDL attributes because:

* they preserve consistency in the platform
* they enable feature-detection for the supported events (see [[#feature-detect]])

So, if the object inherits from {{EventTarget}}, add a corresponding
<code>on<em>yourevent</em></code> [=event handler IDL attribute=] to the interface.

<p class="note">Note that for HTML and SVG elements, it is traditional to add the
[=event handler IDL attributes=] on the {{GlobalEventHandlers}} interface mixin, instead of
directly on the relevant element interface(s). Similarly, [=event handler IDL attributes=]
are traditionally added to {{WindowEventHandlers}} rather than {{Window}}.</p>


<h3 id="events-are-for-notification">Events are for notification</h3>

Try to design DOM events to deliver after-the-fact notifications of changes. It may be tempting to try to trigger side-effects from the action of {{EventTarget/dispatchEvent()}}, but in general this is <a href="https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0510.html">strongly discouraged</a> as it requires changes to the DOM specification when added. Your design will proceed more quickly if you avoid this pattern.

<h3 id="guard-against-recursion">Guard against potential recursion</h3>

When designing a long-running or complicated algorithm that is initiated by an
API call, events are appropriate for [[#events-are-for-notification|notifying]]
user code of the ongoing process. However, they also introduce the possibility of unexpected
re-execution of the current algorithm before it has finished! Because user code gets
to run in the middle of the algorithm, recursion can happen if that user code triggers
the algorithm again (directly or indirectly).

To address this, if the algorithmic complexity and call graph is reasonably understood, add appropriate
state to track that the algorithm is in progress and terminate immediately if the algorithm
is already concurrently running. This technique is "guarding" the algorithm:

<div class="example">
    The following is a technique (e.g., as used in the [=AbortSignal/add|AbortSignal's add algorithm=]
    or as a stack-based variation in the [=focus update steps=])
    for guarding against unplanned recursion.

    In this example, an object of type <dfn noexport interface>MyObject</dfn> has
    a method <dfn method for="MyObject">doComplexOpWithEvents()</dfn> and
    an internal state attribute [[<dfn noexport attribute for="MyObject">started</dfn>]]
    referenced below as
    {{MyObject|this}}.[[{{started}}]] whose initial
    value is `false`.

    The {{doComplexOpWithEvents()}} method must act as follows:

    1. If {{MyObject|this}}.[[{{started}}]] is not `false` then throw an {{InvalidStateError}}
        {{DOMException}} and terminate this algorithm.

        Note: {{doComplexOpWithEvents()}} is not allowed to be run again
        (e.g., from within a `"currentlyinprogress"` event handler) before it finishes
        its original execution.

    2. Set {{MyObject|this}}.[[{{started}}]] to `true`.

    3. ...Do complex stuff...

    4. [=Fire an event=] named `"currentlyinprogress"` at {{MyObject|this}}.

    5. ...Finish up complex stuff...

    6. Set {{MyObject|this}}.[[{{started}}]] to `false`.
</div>

Note: A caution about early termination: if the algorithm being terminated would go
on to ensure some critical state consistency, be sure to also make the relevant adjustments
in state before early termination of the algorithm. Not doing so can lead to inconsistent
state and end-user-visible bugs when implemented as-specified.

Note: A caution about throwing exceptions in early termination: keep in mind the scenario
in which developers will be invoking the algorithm, and whether they would reasonably
expect to handle an exception in this [perhaps rare] case. For example, will this
be the only exception in the algorithm?

Sometimes "guarding" as illustrated above cannot be done because of the complexity
of the algorithm, the number of potential algorithm entry-points, or the side-effects
beyond the algorithm's control. In these cases another form of protecting the integrity
of the algorithm's state is to "defer" the event to a subsequent task or microtask.
Deferral ensures that any stack-based recursion is avoided (but does not eliminate
potentially problematic loops, as they could now occur as unending follow-up tasks).

Deferring an event is often specified as "[=queue a task=] to [=fire an event=]...".

By way of illustration, the deprecated
[Mutation Events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events)
fired in the middle of node insertion and removal algorithms, and
could be triggered by a variety of common API calls like {{Node/appendChild()}}. The side-effects
from recursively running node mutation algorithms caused many years of security issues.
A more robust approach embodied in
{{MutationObserver}}
applies the principle of deferral of notification — in this case to the microtask queue
following the algorithm.

Also note that deferral of events is always necessary if the algorithm that triggers
the event could be running on a different thread or process. In this case deferral
ensures the events can be processed on the correct task in the [=task queue=].

Both approaches to protecting against unwanted recursion have trade-offs. Some things
to consider when choosing the guarding approach:

* all state management can be rationalized within one "turn" of the algorithm (no
    need to consider any state changes or API invocations between the time the algorithm
    completes and when the event fires).
* events can reveal internal state changes as early as possible when dispatched immediately
    in the algorithm (resulting in minimal delay to user code that wants to act on
    that state).
* events do not need to carry snapshots (copies) of internal state because user code
    running in the event handler can observe relevant state directly on the instance
    object they were fired on (avoiding the need to derive a new type of {{Event}}
    to hold such state snapshots).

When deferring, event handlers will run after the algorithm ends (or starts
to run [=in parallel=]) and any number of other tasks or microtasks may run in between
that invalidate the object's state. Since the object's state will be unknown when
the deferred event is dispatched, consider the following:

* state relevant to the event should be packaged with the deferred event, usually
    involving a new {{Event}}-derived type with new attributes to hold the state.
    For example, the {{ProgressEvent}} adds {{ProgressEvent/loaded}},
    {{ProgressEvent/total}}, etc. attributes to hold the state.
* any coordination needed among parts of an algorithm using deferred events often
    requires defining an explicit state machine (well-defined state transitions) to
    ensure that when a deferred event fires, the behavior of inspecting or changing
    state is well-defined. For example, in [[payment-request]], the {{PaymentRequest}}'s
    [=[[state]]=] internal slot explicitly tracks the object's state
    through its well-defined transitions.
    * in addition to defining state transitions, each coordinated algorithm usually
        applies the guarding technique (anyway) to ensure the algorithm can only proceed
        under the appropriate set of states. For example, in [[payment-request]] note
        the guards used often around the [=[[state]]=] internal
        slot such as in the {{MerchantValidationEvent/complete()}} algorithm.

Finally, dispatching a deferred event that does not seem to require
packaging extra state or defining a state machine for the algorithm as mentioned above,
could mean that all of the state transitions have been completed and that the event
is meant to signal completion of the algorithm. In this case, it's likely that instead
of using an event to signal completion, the API should be designed to return and complete
a {{Promise}} instead. See [[#one-time-events]].

Note: events that expose the possibility of recursion as described in this section
were sometimes called "synchronous events". This terminology is discouraged as it
implies that it is possible to dispatch an event asynchronously. All events are dispatched
synchronously. What is more often implied by "asynchronous event" is to defer firing
an event.

<h3 id="state-and-subclassing">State and {{Event}} subclasses</h3>

It's tempting to create subclasses of {{Event}} for all event types. This is frequently unnecessary. Consider subclassing {{Event}} when adding unique methods and large amounts of state. In all other cases, using a "vanilla" event with state captured in the {{Event/target}} object.

<h3 id="events-vs-observers">How to decide between Events and Observers</h3>

Several recent additions to the platform employ an Observer pattern. {{MutationObserver}}, {{IntersectionObserver}}, {{ResizeObserver}}, and <a href="https://github.com/WICG/indexed-db-observers">IndexedDB Observers</a> provide precedents for new Observer types.

Many designs can be described as either Observers or {{EventTarget}}s. How to decide?

In general, start your design process using an {{EventTarget}} and only move to Observers if and when events can't be made to work well. Using an {{EventTarget}} ensures your feature benefits from improvements to the shared base class, such as the recent addition of the {{AddEventListenerOptions/once}}.

Observers have the following properties:

* Each instance is constructed with a callback, and optionally with some global options.
* Instances observe specific targets, using the `observe()` and `unobserve()` methods. The callback provided in the constructor is invoked when something interesting happens to those targets.
* Callbacks receive change records as arguments. These records contain the details about the interesting thing that happened. Multiple records can be delivered at once.
* Observation can be customized with additional options passed to `observe()`.
* `disconnect()` stops observation.
* `takeRecords()` synchronously returns records for all observed-but-not-yet-delivered occurrences.

<p class="example">
    {{MutationObserver}} takes a callback which receives {{MutationRecord}}s. It cannot be customized at construction time, but each observation can be customized using the {{MutationObserverInit}} set of options. It observes {{Node}}s as targets.
</p>

<p class="example">
    {{IntersectionObserver}} takes a callback which receives {{IntersectionObserverEntry}}s. It can be customized at construction time using the {{IntersectionObserverInit}} set of options, but each observation is not further customizable. It observers {{Element}}s as targets.
</p>

Observers involve defining a new class, dictionaries for options, and a new type for the delivered records. For the cost, you gain a few advantages:

* Instances can be customized at observation time. The `observe()` method of an `Observer` can take options, allowing per-callback customization. This is not possible with {{EventTarget/addEventListener()}}.
* Reuse of their creation-time customizations on multiple targets.
* Easy disconnection from multiple targets via `disconnect()`.
* Built-in support for synchronously probing system state. Both `Observer`s and {{EventTarget}}s can batch occurrences and deliver them later, but `Observer`s have a `takeRecords()` method which allows synchronously probing waiting until the next batched delivery.
* Because they are single-purpose, you don't need to specify an event type.

`Observer`s and {{EventTarget}}s overlap in the following ways:

* Both can be customized at creation time.
* Both can batch occurrences and deliver them at any time. {{EventTarget}}s don't need to be synchronous; they can use microtask timing, idle timing, animation-frame timing, etc. You don't need an `Observer` to get special timing or batching.
* Neither {{EventTarget}}s nor `Observer`s need participate in a DOM tree (bubbling/capture and cancellation). Most prominent {{EventTarget}}s are {{Node}}s in the DOM tree, but many other events are standalone; e.g. {{IDBDatabase}} and {{XMLHttpRequestEventTarget}}. Even when using {{Node}}s, you can leave your events can be designed to be non-bubbling and non-cancelable to get that `Observer`-esque feel.

<div class="example">
    Here is an example of using a hypothetical version of {{IntersectionObserver}} that is an {{EventTarget}} subclass:

    <pre highlight="js">
    const io = new ETIntersectionObserver(element, { root, rootMargin, threshold });

    function listener(e) {
        for (const change of e.changes) {
            // ...
        }
    }

    io.addEventListener("intersect", listener);
    io.removeEventListener("intersect", listener);
    </pre>

    As you can see, we've lost some functionality compared to the `Observer` version: the ability to easily observe multiple elements with the same options, or the `takeRecords()` and `disconnect()` methods. We're also forced to add the rather-redundant `"intersect"` event type to our subscription calls.

    However, we haven't lost the batching, timing, or creation-time customization, and the `ETIntersectionObserver` doesn't participate in a hierarchy. These aspects can be achieved with either design.
</div>

<h2 id="types-and-units">Types and Units</h2>

<h3 id="numeric-types">Use numeric types appropriately</h3>

[[!WEBIDL]] contains many numeric types. However, it is very
rare that its more specific ones are actually appropriate.

JavaScript has only one numeric type, Number: IEEE 754 double-precision
floating point, including ±0, ±Infinity, and NaN (although thankfully only one). The Web IDL "types" are coercion rules that apply when accepting an argument or triggering a setter. For example, a Web IDL <code>unsigned short</code> roughly says: "when someone passes this as an argument, take it modulo 65536 before doing any further processing". That is very rarely a useful thing to do.

Instead, you will want to stick with one of:

  : <code>unrestricted double</code>
  :: When truly any JavaScript number will do, including infinities and NaN

  : <code>double</code>
  :: Any JavaScript number excluding infinities and NaN

  : <code>[EnforceRange] long long</code>
  :: Any JavaScript number in the integer-representable range, throwing a <code highlight="js">TypeError</code>
      outside the range and rounding inside of it

  : <code>[EnforceRange] unsigned long long</code>
  :: Any nonnegative JavaScript number in the integer-representable range, throwing a
      <code highlight="js">TypeError</code> outside the range and rounding inside of it

  : <code>bigint</code>
  :: When the possible integer values range more broadly than JavaScript numbers can accurately represent

Additionally, you can combine any of the above with an extra line in your
algorithm to validate that the number is within the expected domain-specific
range, and throwing or performing other actions in response. (While it is very
rarely appropriate to modify author input by taking it modulo 65536, it might be
appropriate to take it modulo 360, for example.)

A special case of domain-specific validation, which Web IDL already has you
covered for, is the 0–255 range. This can be written as <code>[EnforceRange]
octet</code>: any JavaScript number in the range 0–255, throwing a <code
highlight="js">TypeError</code> outside the range and rounding inside of it.
(And indeed, if it turns out that the other power-of-two ranges are semantically
meaningful for your domain, such that you want the modulo or range-checking
behavior, feel free to use them.)

<div class="note">
Those coming from other languages should carefully note that despite their
names, <code>long long</code> and <code>unsigned long long</code> only have 53
bits of precision, and not 64.
</div>

<code>bigint</code> is recommended to be used <em>only</em> in circumstances
where a <code>[EnforceRange] long long</code> or <code>[EnforceRange] unsigned
long long</code> would not work in terms of expressivity: that is, only when
values greater than 2<sup>53</sup> or less than -2<sup>53</sup> are expected. In
particular, APIs should not use the <code>bigint</code> type simply because the
input is an integer&mdash;<code>bigint</code> is for big integers (hence the
name!).

Transparent support for inputs being either JavaScript Number of BigInt types is
discouraged, unless there is a domain-specific requirement to support it. As far
as ergonomics, JavaScript developers are expected to keep track of whether their
values are Numbers or BigInts. Sloppiness or implicit conversions here could
lead to a loss of precision, defeating the purpose of using BigInt.

Further, try to resist doubling up the surface area of an API in order to
provide both `BigInt` and `Number` variants of an API. As an API designer,
consider it your job to chose the correct numeric type for the feature being
exposed.

<h3 id="idl-string-types">Represent strings appropriately</h3>

<!--
    This has been discussed in a number of places.
    When editing this section,
    please try not to lose any of the nuance
    distilled from the discussions in these issues:

    https://github.com/w3c/css-houdini-drafts/issues/687
    https://github.com/w3c/csswg-drafts/issues/1217
    https://github.com/w3c/csswg-drafts/issues/3307
    https://github.com/heycam/webidl/issues/84
    https://github.com/w3ctag/design-reviews/issues/87
-->

When designing a web platform feature which operates on [=strings=],
{{DOMString}} is almost always the right Web IDL [=string type=] to use.
This is because
most string operations don't need
to interpret the [=code units=] inside of the string.
There are exceptions, however, for which Web IDL provides
{{USVString}} and {{ByteString}}. [[!INFRA]] [[!WEBIDL]]

{{USVString}} is the Web IDL type that represents [=scalar value strings=].
For strings whose most common algorithms operate on [=scalar values=]
(such as [$percent-encode|percent-encoding$]),
or for operations which cannot handle [=surrogates=] in input
(such as APIs that pass strings through to native platform APIs),
{{USVString}} should be used.

<p class=example>
[=reflect|Reflecting IDL attributes=]
whose content attribute is defined to contain a [=/URL=]
(such as <{a/href}>)
should use {{USVString}}. [[HTML]]
</p>

{{ByteString}} should only be used for representing
data from protocols like HTTP
which don't distinguish between bytes and strings.
It is not a general-purpose string type.
If you need to represent a [=sequence types|sequence=] of {{byte|bytes}},
use {{Uint8Array}}.

<h3 id="milliseconds">Use milliseconds for time measurement</h3>

Any web API that accepts a time measurement should do so in milliseconds. This
is a tradition stemming from <code highlight="js">setTimeout</code> and the
<code highlight="js">Date</code> API, and carried through since then.

Even if seconds (or some other unit) are more natural in the domain of an API, sticking with
milliseconds ensures interoperability with the rest of the platform, allowing easy arithmetic with
other time quantities.

Note that high-resolution time is usually represented as fractional milliseconds, not e.g. as
nanoseconds.

<h3 id="times-and-dates">Use the appropriate type to represent times and dates</h3>

When representing date-times on the platform, use the {{DOMTimeStamp}} type, with values being the
 number of milliseconds relative to 1970-01-01T00:00:00Z.

The JavaScript <code highlight="js">Date</code> class must not be used for this purpose. <code highlight="js">Date</code> objects
are mutable (and there is no way to make them immutable), which comes with a host of attendant
problems.

<div class="note">
    For more background on why <code highlight="js">Date</code> must not be used, see the following:

    * <a href="https://esdiscuss.org/topic/frozen-date-objects">Frozen date objects?</a> on
        es-discuss
    * <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22824">Remove Date from Web IDL</a>
        on the Web IDL Bugzilla
</div>

While in theory time is monotonically increasing,
values like {{DOMTimeStamp}} that represent time since 1970 are derived from the system's clock,
which may sometimes move backwards
(for example, from NTP or manual adjustment),
causing the timestamp values to decrease over time.
They may also remain the same due to the limitation of millisecond resolution.
Thus, for time stamps that do not need to correspond to an absolute time,
consider using {{DOMHighResTimeStamp}},
which provides monotonically non-decreasing sub-millisecond timestamps
that are comparable within a single <a>browsing context</a> or web worker.
See [[!HIGHRES-TIME]] for more details.

<h3 id="error-types">Use Error or DOMException for errors</h3>

Errors in web APIs should be represented as
ECMAScript error objects (e.g., {{Error}})
or as {{DOMException}}.
There was at one point a trend to use {{DOMError}} when
objects had a property representing an error.
However, we no longer believe there was value in this split,
and therefore suggest that ECMAScript error objects (e.g., {{TypeError}})
or {{DOMException}}
should be used for errors,
whether they are exceptions, promise rejection values, or properties.

<h2 id="device-apis">OS and Device Wrapper APIs</h2>

It is increasingly common to see new APIs developed in the web platform for interacting with
devices. For example, authors wish to be able to use the web to connect with their
<a href="https://www.w3.org/TR/mediacapture-streams/">microphones and cameras</a>,
<a href="https://www.w3.org/TR/generic-sensor/">generic sensors</a> (such as gyroscope and
accelerometer),
<a href="https://www.w3.org/community/web-bluetooth/">Bluetooth</a> and
<a href="https://wicg.github.io/webusb/">USB</a>-connected peripherals,
<a href="https://www.w3.org/community/autowebplatform/">automobiles</a>, toothbrush, etc.

These can be functionality provided by the underlying operating system, or provided by a native
third-party library to interact with a device. These are an abstraction which "wrap" the
native functionality without introducing significant complexity while securing the API surface
to the browser, hence are called wrapper APIs.

This section contains principles for consideration when designing APIs for devices.

<h3 id="device-ids">Use care when exposing identifying information about devices</h3>

Merely exposing the presence of a device
may harm user privacy.
Exposing
additional information about a device
or its capabilities
increases this risk further.
Exposing device identifiers
increases this risk even more.
Any such information
increases the set of fingerprinting data available to sites.
But there are possible user privacy harms here
that go beyond fingerprinting.
Please read [[FINGERPRINTING-GUIDANCE]] and [[UNSANCTIONED-TRACKING]]
for additional details.

Think carefully about
whether it is really necessary
to expose identifying information about the device at all.
Please consider if your use cases could be satisfied
by a less powerful API. [[LEAST-POWER]]

Despite these concerns,
you may find that it is necessary
to expose identifying information about a device to the web platform.

The following guidelines will help ensure
that this is done in a consistent and privacy-friendly way:

: Limit identifiable information in the id
:: As much as possible,
    device ids exposed to the web platform
    should not contain identifiable information
    such as branding, make and model numbers, etc.
    In many cases
    using a randomized number or unique id
    is preferable to
    a generic string identifier such as "device1".

    Device ids expressed as numbers
    should contain sufficient entropy
    so as to avoid re-use or potential sharing among other devices,
    and should not be easily guessable.
: Keep the user in control
:: Any existing device ids
    mapped to or stored with the current session by the user agent
    should be cleared
    when users elect to "clear their cookies" (and other related settings).
    Above all,
    the user should be in control of this potential tracking state
    and be able to reset it on demand.
: Hide sensitive ids behind a user permission
:: Where device identification does not make sense to be expressed in an anonymous way,
    access to the identifier
    should be limited by default.
    One way to limit exposure
    is to only surface the identifier to author code
    <em>after</em> obtaining permission from the user.
: Tie ids to the same-origin model
:: Identifiers should be unique
    to the origin of the web content that is attempting to access them.
    Web content from one origin should receive an identifier that is distinct
    from the identifier given to web content from any other origin
    despite the physical device being the same.
:: Within an origin,
    ids may have a stable representation to web content.
    This ensures a consistent developer experience
    if requesting the same device twice.
: Persistable when necessary
:: Some device identifiers
    can only be obtained
    via a complex or time-consuming device selection process.
    In such cases,
    it may make sense for author code
    to be able to persist such identifiers
    for use in a later session
    in order to avoid the selection process a second time.
    When this is the case,
    the API should not only
    provide a stable id during the session for the given origin,
    but it should also be capable of
    deterministically producing the same id
    in subsequent sessions.

<h3 id="device-enumeration">Use care when exposing APIs for selecting or enumerating devices</h3>

APIs which expose the the existence, capabilities, and/or identifiers of many devices
risk multiplying the harm described in [[#device-ids]]
(since they expose fingerprinting entropy per exposed device)
and thus require additional consideration.

As in the previous section,
please consider if your use cases could be satisfied
by a less powerful API. [[LEAST-POWER]]

If the purpose of the API
is to enable the user **to select a device**
from the set of available devices of a particular kind,
you may not need to expose a list to script at all.
An API which invokes a User-Agent-provided device picker
could suffice.
Such an API
keeps the user in control,
hides the device behind a user permission,
does not expose any fingerprinting data about the user's environment by default,
and, when used, only exposes information about one device.

<div class=example>
File selection form controls
(<{input/type/file|&lt;input type=file>}>)
invoke a User Agent-provided file picker.
This elegant design ensures that
the website only gets access to file(s) the user explicitly selected,
and does not receive any other information
about the user's file system.
[[HTML]]

</div>

When designing such an API,
it may be necessary to also expose
the fact that there are devices are available to be picked.
Such a feature exposes
a small amount (one bit) of fingerprinting data about the user's environment
to websites,
so it isn't quite as safe as
an API which does not have such a feature.

<div class=example>

The {{RemotePlayback}} interface
does not expose a list of available [=remote playback devices=].
Like <{input/type/file|&lt;input type=file>}>, it invokes a User Agent-defined device picker,
which has the same desirable properties.
[[REMOTE-PLAYBACK]]

Unlike <{input/type/file|&lt;input type=file>}>, it also
enables websites to detect whether or not
any [=remote playback device=] is available,
so the website can show or hide a control
the user can use to invoke the picker.

</div>

If you must expose a list of devices,
try to **expose the smallest subset**
that satisfies your use cases.
Consider an API which allows the website
to request **a filtered or constrained list** of devices,
but keep in mind that
constraint-matching systems may reveal more information than intended
when repeatedly invoked with different constraints.

If you must expose the full list of devices of a particular kind,
please rigorously **define the order** in which devices will be listed.
This can reduce interoperability issues,
and helps to mitigate fingerprinting
(because sort order could reveal other information;
see [[FINGERPRINTING-GUIDANCE#a_standardized_profile]] for more.)

While APIs should not
expose a full list of devices in an [=implementation-defined=] order,
they may need to for web compatibility reasons.

<h3 id="wrapper-apis">Native APIs don't typically translate well to the web</h3>

Many modern operating systems come with convenience APIs, which abstract away
normally complex technology in the form of higher level user-friendly APIs.

Exposing these APIs to the web platform is getting more and more common, but you
need to be careful when exposing these to the web platform.

 : Generalize interface when underlying API is overly specific
 :: Don't blindly map native convenience APIs 1:1 to the web platform.
    Native APIs do not translate well to the web platform, and doing so may result
    in a API shape which is difficult to implement across a variety of underlying
    platforms and native libraries.

    Especially be careful about exposing the exact lifecycle and data
    structures of the underlying native APIs. Think about making an API that
    [[#string-constants|fits well in with existing web platform APIs]] and which can be expressed in
    commonly available low-level APIs.

 : Prefer asynchronous function by returning promises
 :: Even if the underlying API is synchronous, this does not necessarily mean it
    translates well when ported to the web platform. Exposing a synchronous native
    API to the web platform is generally discouraged, and should be
    provided as a promise based API whenever possible.

    Doing this also allows putting the API behind a permission if it is
    necessary, especially if the API depends on I/O or in the future may need to
    be isolated to a separate process.

 : Don't overconstrain or overfit the API to the underlying (wrapped) OS
 :: When designing a wrapper API, you should consider how different implementations
    (operating systems and platforms) provide this functionality. Ideally the entire
    specification is implementable across platforms, but in some cases it may be
    desirable to expose distinctions made on only some platforms.

    These distinctions should be clearly noted if they are known in advance.

 : Do not propose black-box proprietary library or dedicated hardware processor dependencies
 :: Black-box dependencies are strongly discouraged, as this not only prevents wide
    implementor adoption, but is unhealthy to the open nature of the web.

 : Underlying protocols should be open
 :: APIs which require exchange with external hardware or services should not depend
    on closed protocols.

 : Be offline friendly
 :: Web platform APIs should ideally not have a hard dependency on online services.
    The availability of these services across different regions may vary, users
    may be offline, and the online services have no guarantee of being always
    available.

 : Avoid additional fingerprinting surfaces
 :: Wrapper APIs can expose unintentionally expose the user to a wider fingerprinting surface.
    Please read the TAG's finding on
    <a href="http://www.w3.org/2001/tag/doc/unsanctioned-tracking/">unsanctioned tracking</a>
    for additional details.

<h2 id="other-considerations">Other API Design Considerations</h2>

<h3 id="design-resources">Privacy, Security, Accessibility, and Internationalization</h3>

It is important not to neglect other aspects of API design such as privacy, security, accessibility, and internationalization.
Please take advantage of these other excellent resources in your design process:

* <a href="https://w3c.github.io/privacy-considerations/">Privacy Considerations for Web Protocols</a>
* <a href="https://www.w3.org/TR/security-privacy-questionnaire/">Self-Review Questionnaire: Security and Privacy</a>
* <a href="https://w3c.github.io/apa/fast/">Web Technology Accessibility Guidelines</a>
* <a href="https://w3c.github.io/bp-i18n-specdev/">Internationalization Best Practices for Spec Developers</a> <!-- also at https://www.w3.org/TR/international-specs/ -->

<h3 id="polyfills">Polyfills</h3>

Polyfills can be hugely beneficial in helping to roll out new features to the web platform. The
Technical Architecture Group <a href="https://www.w3.org/2001/tag/doc/polyfills/">finding on Polyfills and the Evolution of the Web</a> offers guidance
that should be considered in the development of new features, notably:

* Being "polyfillable" is not essential but <strong>is</strong> beneficial
* [[#feature-detect]]
* Polyfill development should be encouraged

<h3 id="extend-manifests">Extend existing manifest files rather than creating new ones</h3>

New web features should be self-contained and self-describing and ideally should not require an additional manifest file.
Manifest files can add complexity to the development and deployment process for web technologies.  Sometimes manifest
files are required, but the use of different manifests on the web should be kept to a minimum.

You may need to make a new manifest file if the domain of the manifest file is different from the existing manifest files.
For example, if the fetch timing is different, or if the complexity of the manifest warrants it.  Application metadata should be added
to the Web App Manifest or be an extension of it.
Manifests designated to be used for specific applications or which require interoperability with non-browsers may need to take a different approach.
Payment Method Manifest, Publication Manifest, and Origin Policy are examples of these cases.

For example, if you have a single piece of metadata, even if the fetch timing is different than an existing manifest,
it is probably best to use an existing manifest (or ideally design the feature in such a way that a manifest is not required).
However, if your feature requires a complex set of metadata specific to a functional domain, the creation of a new manifest may be justified.

Note that in all cases, the naming conventions should be harmonized (see section 2.2)

Note: By principle, existing manifests use lowercase, underscore-delimited names.
There have been times where it has been beneficial to re-use dictionaries from a manifest in DOM APIs as well, which are camel-cased.
One such example is the <a href="https://w3c.github.io/image-resource/">image resource</a>. For this reason, if a
key can clearly be expressed as a single word, that is recommended.

When designing new keys and values for a manifest, make sure they are needed (that is, they enable well-thought-out use-cases).
Also, please check if a similar key exists. If an existing key/value pair does more or less what is needed,
work with the existing spec to extend it to your use-case if possible.

Some of the existing manifest files include

* <a href="https://www.w3.org/TR/appmanifest/">Web App Manifest</a> which contains features related to web applications.
* <a href="https://www.w3.org/TR/payment-method-manifest/">Payment Method Manifest</a> which is used for payment methods in the context of the web payment API
* <a href="https://www.w3.org/TR/pub-manifest/">Publication Manifest</a> which is used by some web publications working group standards
* <a href="https://wicg.github.io/origin-policy/">Origin Policy</a> which is used to set security policies.

We encourage people to think of manifest files as extensible.
Always try to get the changes into the original spec, or at least discuss the extension with the spec editors.
Having this discussion is more likely to result in a better design and lead to something that better integrates with the platform.

There are certain times the spec authors might not want to
integrate immediately due to process (like going to CR) or due to it having a different scope, like extensions to Web App
Manifest only affecting store or payment use-cases. In that case, it is acceptable to monkey-patch as long as that is agreed
with the original spec editors.

ISSUE(184): when we write up a principle on monkey patching, be sure to take this nuance into account.

An example of something that was done as a monkey patch that is scheduled to be integrated into the web app manifest in
a future level (post-CR):

* https://wicg.github.io/web-share-target/#extension-to-the-web-app-manifest

<h2 id="spec-writing">Writing good specifications</h2>

This document mostly covers API design for the Web,
but those who design APIs are hopefully also writing specifications
for the APIs that they design.

<h3 id="requirements-on-authors-and-implementers">Identify the audience of each requirement in your specification</h3>
<!-- was "Conformance for Documents and Implementations" in the HTML Design Principles -->

The web platform is,
unusually,
designed to be robust in accepting poorly-formed markup.

When writing specifications for the web,
be sure to note authoring requirements
for well-formed markup (the "conforming language"),
and also
implementation requirements
for handling poorly-formed markup (the "supported language").

This allows us to
have a relatively clean and understandable language for authors,
while at the same time supporting existing documents
that make use of older or nonstandard constructs,
and enabling better interoperability in error handling.

<h3 id="avoid-ambiguity">Specify completely and avoid ambiguity</h3>
<!-- was "Well-defined behavior" in the HTML Design Principles -->

If the specification leaves room for implementations to make different choices
which mean authors need to write different markup for different implementations,
this adds a maintenance burden for authors.

The specification should be complete enough
for implementations to be interoperable,
without depending on or referring to the details of other implementations.
When there isn't a good reason to allow variation between implementations,
it is important that things be specified unambiguously,
so that implementations interoperate
and web content doesn't end up
depending on the [=implementation-defined=] behavior
in one implementation and failing in another
(which can cause higher development costs to fix the content for all browsers,
or costs to users of broken content if it wasn't detected).
This way,
it is easier to author content
that works in a variety of user agents.
However,
implementations should still be free
to make improvements
in areas such as user interface
and quality of rendering.

<h4 id="algorithms">Defining algorithms in specifications</h4>

Specification text is often more precise
when it is written using an explicit sequence of steps.
Using an ordered sequence of steps makes it clear how the required behaviors interact.
For example, if there are multiple error conditions present,
a specification that describes the behavior using a sequence of steps
will make it clear which error will be reported,
since the different errors would be checked and reported in different steps.

However, sequences of steps
are not the only way to make a specification precise enough.
When there are particular characteristics
that specification editors want to ensure the specification always satisfies,
it may be better to use a less algorithmic way of formal specification
that ensures these characteristics are always true.
Developing these other ways of specifying behavior formally
is more important when the algorithms would be more repetitive.
These formal specification techniques can include dependencies on
languages such as [[WEBIDL]], on grammar productions,
or the development of new languages for defining pieces of the specification.
Merely having a formal syntax is not sufficient, though;
the requirements that the formal definitions place on implementations must still be clearly defined,
which generally requires specifying some algorithms (or, sometimes, another layer of formal syntax) that define what the formal syntax means,
and then using the more-readable formal syntax to avoid
excessive repetition of the less-readable algorithms.
There are also possibilities in-between, for example,
if it is desirable to ensure that an algorithm can be implemented with a state machine,
it may be preferable to specify it in an algorithmic way that incorporates explicit states
so that the specification authors avoid accidentally creating more states than intended.

When specifying in an algorithmic way,
it is generally good to match the algorithms that implementations would use,
even if this is somewhat less convenient for specification authors,
as long as doing so would not significantly increase the specification's complexity.
For example, it is better to specify CSS selector matching
by moving right to left across <a>combinators</a>,
since that is what implementations do.
This avoids the risk of future problems caused by new features
that would be slightly different (in unimportant ways)
between implementations based on one algorithm and implementations based on a different one.
Thus, it avoids small future divergence in behavior between specification and implementations.
It also helps to keep the costs of specifying features aligned with implementing them,
since the complexity of adding a feature to the specification is more likely to be related
to the cost of adding it to implementations.

Algorithms in specifications should also reflect best practices in programming.
For example, they should explicitly describe the inputs and outputs of the algorithm,
rather than relying on "stack introspection" or handwaving.
They should also avoid side-effects when possible.

[[!INFRA]] offers
<a href="https://infra.spec.whatwg.org/#algorithms">some useful definitions
and terminology</a>
for defining algorithms.

Specifications that define things using step-by-step algorithms should still be readable.
Partly, this is through good practices that also apply to writing code,
such as avoiding unneeded extra steps, and by using good naming.
However, it's often useful to explain the purpose of the algorithm in prose
(e.g., "take the following steps, which ensure that there is at most one pending X
callback per toplevel browsing context")
so that readers can quickly decide whether they need to read the steps in detail.

<h4 id="use-flags-for-states">Use explicit flags for state</h4>

Describing state using explicit flags makes behavior clearer.
Using explicit flags makes it clear
whether or not the state changes in different error conditions,
and makes it clear when the state described by the flags is reset.

<!-- TODO: add examples -->

<h2 id="naming-is-hard">Naming principles</h2>

Names take meaning from:

* signposting (the name itself)
* use (how people come to understand the name over time)
* context (the object on the left-hand side, for example)

<h3 id="naming-common-words">Use common words</h4>

API naming *must* be done in easily readable US English.
Keep in mind that most web developers aren't native English speakers.
Whenever possible, names should be chosen that use common vocabulary
a majority of English speakers are likely to understand when first encountering the name.

<div class="example">

For example `setSize` is
a more English-readable name
than `cardinality`.

</div>

Value readability over brevity.
Keep in mind, however, that sometimes
the shorter name is the clearer one.
For instance,
it may be appropriate to use technical language or well-known terms of art
in the specification where the API is defined.

<div class="example">

For example,
the Fetch API's {{Body}} mixin's {{Body/json()}} method
is named for the kind of object it returns.
JSON is a well-known term of art
among web developers likely to use the Fetch API.
It would harm comprehension
to name this API less directly connected to its return type. [[FETCH]]

</div>

<h3 id="naming-charset">Use ASCII names</h4>

Names must adhere to the local language restrictions, for example CSS ident rules etc.
and *should* be in the [=ascii code point|ASCII range=].

<h3 id="naming-consultation">Consultation</h4>

Please consult widely on names in your APIs.

You may find good names or inspiration in surprising places.
- What are similar APIs named on other platforms,
or in popular libraries in various programming languages?
- Ask end users and developers what they call
things that your API works with or manipulates.
- Look at other web platform specifications,
and seek advice from others working in related areas of the platform.

Pay particular attention to advice you receive
with clearly-stated rationale based on underlying principles.

<div class="example">

Tantek Çelik [extensively researched](https://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces)
how to name the various pieces of a URL.
The editors of the [URL spec](https://url.spec.whatwg.org)
have relied on this research
when editing that document. [[URL]]

</div>

<h3 id="naming-future-proofing">Future-proofing</h4>

Naming should be generic and future-proof whenever possible.

The name should not be directly associated with a brand or specific revision of
the underlying technology whenever possible; technology becomes obsolete, and
removing APIs from the web is difficult.

<div class="example">

The Remote Playback API was not named
after one of the pre-existing, proprietary systems it was inspired by
(such as Chromecast or AirPlay).
Instead, general terms that describe what the API does were chosen. [[REMOTE-PLAYBACK]]

</div>

<div class="example">

The `keydown` and `keyup` {{KeyboardEvent}}s were not named
for the specific hardware bus that keyboards used at the time.
Instead, generic names were chosen
that are as applicable to today's Bluetooth and USB keyboards
as they were to PS/2 and ADB keyboards back then. [[UIEVENTS]]

</div>

<h3 id="naming-consistency">Consistency</h4>
Naming schemes should aim for consistency, to avoid confusion.

Sets of related names should agree with each other in:
  * part of speech  - noun, verb, etc.
  * negation, for example all of the names in a set should either describe what is allowed
    or they should all describe what is denied

<h4 id="naming-booleans" class="no-num no-toc">Boolean properties vs.
  boolean-returning methods</h5>

Boolean properties, options, or API parameters which are asking a question about
their argument *should not* be prefixed with <code>is</code>, while methods
that serve the same purpose, given that it has no side effects, *should* be
prefixed with <code>is</code> to be consistent with the rest of the platform.

<h4 id="casing-rules" class="no-num no-toc">Use casing rules consistent with existing APIs</h5>

Although they haven't always been uniformly followed, through the history of web platform API
design, the following rules have emerged:

<table class="data complex">
    <thead>
        <tr>
            <th></th>
            <th>Casing rule</th>
            <th>Examples</th>
        </tr>
    </thead>
    <tr>
        <th>Methods and properties<br>(Web IDL attributes, operations, and dictionary keys)</th>
        <td>Camel case</td>
        <td><code highlight="js">document.createAttribute()</code><br>
            <code highlight="js">document.compatMode</code></td>
    </tr>
    <tr>
        <th>Classes and mixins<br>(Web IDL interfaces)</th>
        <td>Pascal case</td>
        <td><code highlight="js">NamedNodeMap</code><br>
            <code highlight="js">NonElementParentNode</code></td>
    </tr>
    <tr>
        <th>Initialisms in APIs</th>
        <td>All caps, except when the first word in a method or property</td>
        <td><code highlight="js">HTMLCollection</code><br>
            <code highlight="js">element.innerHTML</code><br>
            <code highlight="js">document.bgColor</code></td>
    </tr>
    <tr>
        <th>Repeated initialisms in APIs</th>
        <td>Follow the same rule</td>
        <td><code highlight="js">HTMLHRElement</code><br>
            <code highlight="js">RTCDTMFSender</code><br>
    </tr>
    <tr>
        <th>The abbreviation of "identity"</th>
        <td><code highlight="js">Id</code>, except when the first word in a method or property</td>
        <td><code highlight="js">node.getElementById()</code><br>
            <code highlight="js">event.pointerId</code><br>
            <code highlight="js">credential.id</code></td>
    </tr>
    <tr>
        <th>Enumeration values</th>
        <td>Lowercase, dash-delimited</td>
        <td><code highlight="js">"no-referrer-when-downgrade"</code></td>
    </tr>
    <tr>
        <th>Events</th>
        <td>Lowercase, concatenated</td>
        <td><code>autocompleteerror</code><br>
            <code>languagechange</code></td>
    </tr>
    <tr>
        <th>HTML elements and attributes</th>
        <td>Lowercase, concatenated</td>
        <td><code highlight="html">&lt;figcaption&gt;</code><br>
            <code highlight="html">&lt;textarea maxlength&gt;</code></td>
    </tr>
    <tr>
        <th>JSON keys</th>
        <td>Lowercase, underscore-delimited</td>
        <td><code highlight="js">manifest.short_name</code></td>
    </tr>
</table>

<div class="non-normative">
Note that in particular, when a HTML attribute is <a>reflected</a> as a property, the attribute
and property's casings won't necessarily match. For example, the HTML attribute
<{img/ismap}> on <{img}> elements is <a>reflected</a> as the
{{HTMLImageElement/isMap}} property on {{HTMLImageElement}}.

The rules for JSON keys are meant to apply to specific JSON file formats sent over HTTP
or stored on disk, and don't apply to the general notion of JavaScript object keys.

Repeated initialisms are particularly non-uniform throughout the platform. Infamous historical
examples that violate the above rules are {{XMLHttpRequest}} and
{{HTMLHtmlElement}}. Don't follow their example; instead always capitalize your
initialisms, even if they are repeated.
</div>

<h3 id="naming-unsafe">Warning about dangerous features</h4>

Where possible, mark features that weaken
the guarantees provided to developers
by making their names start with "unsafe" so that this is more noticeable.

For example,
[Content Security Policy (CSP)](https://w3c.github.io/webappsec-csp/)
provides protection against certain types of content injection vulnerabilities.
CSP also provides features that weaken this guarantee,
such as the `unsafe-inline` keyword,
which reduces CSP's own protections by allowing inline scripts.

<h3 id="css-naming">Naming of CSS properties and values</h3>

The names of CSS properties are usually nouns,
and the names of their values are usually adjectives (although sometimes nouns).

Words in properties and values are separated by hyphens.
Abbreviations are generally avoided.

Use the root form of words when possible
rather than a form with a grammatical prefix or suffix
(for example, "size" rather than "sizing").

The list of values of a property should generally be chosen
so that new values can be added.
Avoid values like ''yes'', ''no'', ''true'', ''false'',
or things with more complex names that are basically equivalent to them.

Avoid words like "mode" or "state" in the names of properties,
since properties are generally setting a mode or state.

<h3 id="writing-resources">Other resources</h3>

Some useful advice on how to write specifications is available elsewhere:
  * <a href="https://ln.hixie.ch/?start=1140242962&amp;count=1">Writing
    specifications: Kinds of statements</a> (Ian Hickson, 2006)
  * <a href="https://www.w3.org/TR/qaframe-spec/">QA Framework:
    Specification Guidelines</a> (W3C QA Working Group, 2005)

<h2 id="acks" class="no-num">Acknowledgments</h2>

This document consists of
principles which have been collected
by TAG members past and present
during TAG [design reviews](https://github.com/w3ctag/design-reviews/).
We are indebted to everyone who has requested a design review from us.

The TAG would like to thank
Adrian Hope-Bailie,
Alan Stearns,
Aleksandar Totic,
Alex Russell,
<!-- Alice Boxhall, (current TAG member) -->
Andreas Stöckel,
Andrew Betts,
Anne van Kesteren,
Benjamin C. Wiley Sittler,
Boris Zbarsky,
Brian Kardell,
Charles McCathieNevile,
Chris Wilson,
Dan Connolly,
<!-- Daniel Appelquist, (current TAG member) -->
Daniel Ehrenberg,
Daniel Murphy,
<!-- David Baron, (current TAG member) -->
Domenic Denicola,
Eiji Kitamura,
Eric Shepherd,
Ethan Resnick,
fantasai,
François Daoust,
<!-- Hadley Beeman, (current TAG member) -->
Henri Sivonen,
HE Shi-Jun,
Ian Hickson,
Irene Knapp,
Jake Archibald,
Jeffrey Yasskin,
Jeremy Roman,
Jirka Kosek,
<!-- Kenneth Rohde Christiansen, (current TAG member) -->
Kevin Marks,
Lachlan Hunt,
Léonie Watson,
L. Le Meur,
Lukasz Olejnik,
Maciej Stachowiak,
Marcos Cáceres,
Mark Nottingham,
Martin Thomson,
Matt Giuca,
Matt Wolenetz,
Michael[tm] Smith,
Mike West,
Nick Doty,
Nigel Megitt,
Nik Thierry,
Ojan Vafai,
Olli Pettay,
Pete Snyder,
<!-- Peter Linss, (current TAG member) -->
Philip Jägenstedt,
Philip Taylor,
Reilly Grant,
Richard Ishida,
Rick Byers,
<!-- Rossen Atanassov, (current TAG member) -->
Ryan Sleevi,
<!-- Sangwhan Moon, (current TAG member) -->
Sergey Konstantinov,
Stefan Zager,
Stephen Stewart,
Steven Faulkner,
Surma,
Tab Atkins-Bittner,
Tantek Çelik,
<!-- Theresa O'Connor, (current TAG member) -->
<!-- Tim Berners-Lee, (current TAG member) -->
Tobie Langel,
Travis Leithead,
and
Yoav Weiss
<!-- Yves Lafon (current TAG member) -->
for their contributions to this & the [HTML Design Principles](https://www.w3.org/TR/html-design-principles/) document which preceded it.

Special thanks to
Anne van Kesteren
and
Maciej Stachowiak,
who edited the [HTML Design Principles](https://www.w3.org/TR/html-design-principles/) document.

If you contributed to this document
but your name is not listed above,
please let the editors know
so they can correct this omission.
